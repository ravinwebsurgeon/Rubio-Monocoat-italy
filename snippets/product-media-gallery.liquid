{% comment %}
  Renders a product media gallery. Should be used with 'media-gallery.js'
  Also see 'product-media-modal'

  Accepts:
  - product: {Object} Product liquid object
  - variant_images: {Array} Product images associated with a variant
  - limit: {Number} (optional) When passed, limits the number of media items to render

  Usage:
  {% render 'product-media-gallery' %}
{% endcomment %}

{% comment %} {%- liquid
  if section.settings.hide_variants and variant_images.size == product.media.size
    assign single_media_visible = true
  endif

  if limit == 1
    assign single_media_visible = true
  endif

  assign media_count = product.media.size
  if section.settings.hide_variants and media_count > 1 and variant_images.size > 0
    assign media_count = media_count | minus: variant_images.size | plus: 1
  endif

  if media_count == 1 or single_media_visible
    assign single_media_visible_mobile = true
  endif

  if media_count == 0 or single_media_visible_mobile or section.settings.mobile_thumbnails == 'show' or section.settings.mobile_thumbnails == 'columns' and media_count < 3
    assign hide_mobile_slider = true
  endif

  if section.settings.media_size == 'large'
    assign media_width = 0.65
  elsif section.settings.media_size == 'medium'
    assign media_width = 0.55
  elsif section.settings.media_size == 'small'
    assign media_width = 0.45
  endif
-%} {% endcomment %}

{% comment %} <media-gallery
  id="MediaGallery-{{ section.id }}"
  role="region"
  {% if section.settings.enable_sticky_info %}
    class="product__column-sticky"
  {% endif %}
  aria-label="{{ 'products.product.media.gallery_viewer' | t }}"
  data-desktop-layout="{{ section.settings.gallery_layout }}"
>


  <div id="GalleryStatus-{{ section.id }}" class="visually-hidden" role="status"></div>
  <slider-component id="GalleryViewer-{{ section.id }}" class="slider-mobile-gutter">
    <a class="skip-to-content-link button visually-hidden quick-add-hidden" href="#ProductInfo-{{ section.id }}">
      {{ 'accessibility.skip_to_product_info' | t }}
    </a>
    <ul
      id="Slider-Gallery-{{ section.id }}"
      class="product__media-list contains-media grid grid--peek list-unstyled slider slider--mobile"
      role="list"
    >
      {%- if product.selected_or_first_available_variant.featured_media != null -%}
        {%- assign featured_media = product.selected_or_first_available_variant.featured_media -%}
        <li
          id="Slide-{{ section.id }}-{{ featured_media.id }}"
          class="product__media-item grid__item slider__slide is-active{% if single_media_visible %} product__media-item--single{% endif %}{% if featured_media.media_type != 'image' %} product__media-item--full{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}"
          data-media-id="{{ section.id }}-{{ featured_media.id }}"
        >
          {%- assign media_position = 1 -%}
          {% render 'product-thumbnail',
            media: featured_media,
            media_count: media_count,
            position: media_position,
            desktop_layout: section.settings.gallery_layout,
            mobile_layout: section.settings.mobile_thumbnails,
            loop: section.settings.enable_video_looping,
            modal_id: section.id,
            xr_button: true,
            media_width: media_width,
            media_fit: section.settings.media_fit,
            constrain_to_viewport: section.settings.constrain_to_viewport,
            lazy_load: false
          %} 
        </li>
      {%- endif -%}
      {%- for media in product.media -%}
        {% if media_position >= limit
          or media_position >= 1
          and section.settings.hide_variants
          and variant_images contains media.src
        %}
          {% continue %}
        {% endif %}

        {%- unless media.id == product.selected_or_first_available_variant.featured_media.id -%}
          <li
            id="Slide-{{ section.id }}-{{ media.id }}"
            class="product__media-item grid__item slider__slide{% if single_media_visible %} product__media-item--single{% endif %}{% if product.selected_or_first_available_variant.featured_media == nil and forloop.index == 1 %} is-active{% endif %}{% if media.media_type != 'image' %} product__media-item--full{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}"
            data-media-id="{{ section.id }}-{{ media.id }}"
          >
            {%- liquid
              assign media_position = media_position | default: 0 | plus: 1
              assign lazy_load = false
              if media_position > 1
                assign lazy_load = true
              endif
            -%}
            {% render 'product-thumbnail',
              media: media,
              media_count: media_count,
              position: media_position,
              desktop_layout: section.settings.gallery_layout,
              mobile_layout: section.settings.mobile_thumbnails,
              loop: section.settings.enable_video_looping,
              modal_id: section.id,
              xr_button: true,
              media_width: media_width,
              media_fit: section.settings.media_fit,
              constrain_to_viewport: section.settings.constrain_to_viewport,
              lazy_load: lazy_load
            %} 
             
          </li>
        {%- endunless -%}
      {%- endfor -%}
    </ul>
    <div class="slider-buttons quick-add-hidden{% if hide_mobile_slider %} small-hide{% endif %}">
      <button
        type="button"
        class="slider-button slider-button--prev"
        name="previous"
        aria-label="{{ 'general.slider.previous_slide' | t }}"
      >
        <span class="svg-wrapper">
          {{- 'icon-caret.svg' | inline_asset_content -}}
        </span>
      </button>
      <div class="slider-counter caption">
        <span class="slider-counter--current">1</span>
        <span aria-hidden="true"> / </span>
        <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
        <span class="slider-counter--total">{{ media_count }}</span>
      </div>
      <button
        type="button"
        class="slider-button slider-button--next"
        name="next"
        aria-label="{{ 'general.slider.next_slide' | t }}"
      >
        <span class="svg-wrapper">
          {{- 'icon-caret.svg' | inline_asset_content -}}
        </span>
      </button>
    </div>
  </slider-component>
  {%- if first_3d_model -%}
    <button
      class="button button--full-width product__xr-button"
      type="button"
      aria-label="{{ 'products.product.xr_button_label' | t }}"
      data-shopify-xr
      data-shopify-model3d-id="{{ first_3d_model.id }}"
      data-shopify-title="{{ product.title | escape }}"
      data-shopify-xr-hidden
    >
      <span class="svg-wrapper">
        {{- 'icon-3d-model.svg' | inline_asset_content -}}
      </span>
      {{ 'products.product.xr_button' | t }}
    </button>
  {%- endif -%}
  {%- liquid
    assign is_not_limited_to_single_item = false
    if limit == null or limit > 1
      assign is_not_limited_to_single_item = true
    endif
  -%}
  {%- if is_not_limited_to_single_item
    and media_count > 1
    and section.settings.gallery_layout contains 'thumbnail'
    or section.settings.mobile_thumbnails == 'show'
  -%}
    <slider-component
      id="GalleryThumbnails-{{ section.id }}"
      class="thumbnail-slider slider-mobile-gutter quick-add-hidden{% unless section.settings.gallery_layout contains 'thumbnail' %} medium-hide large-up-hide{% endunless %}{% if section.settings.mobile_thumbnails != 'show' %} small-hide{% endif %}{% if media_count <= 3 %} thumbnail-slider--no-slide{% endif %}"
    >
      <button
        type="button"
        class="slider-button slider-button--prev{% if media_count <= 3 %} small-hide{% endif %}{% if media_count <= 4 %} medium-hide large-up-hide{% endif %}"
        name="previous"
        aria-label="{{ 'general.slider.previous_slide' | t }}"
        aria-controls="GalleryThumbnails-{{ section.id }}"
        data-step="3"
      >
        <span class="svg-wrapper">
          {{- 'icon-caret.svg' | inline_asset_content -}}
        </span>
      </button>
      <ul
        id="Slider-Thumbnails-{{ section.id }}"
        class="thumbnail-list list-unstyled slider slider--mobile{% if section.settings.gallery_layout == 'thumbnail_slider' %} slider--tablet-up{% endif %}"
      >
        {%- capture sizes -%}
          (min-width: {{ settings.page_width }}px) calc(({{ settings.page_width | minus: 100 | times: media_width | round }} - 4rem) / 4),
          (min-width: 990px) calc(({{ media_width | times: 100 }}vw - 4rem) / 4),
          (min-width: 750px) calc((100vw - 15rem) / 8),
          calc((100vw - 8rem) / 3)
        {%- endcapture -%}

        {%- if featured_media != null -%}
          {%- liquid
            capture media_index
              if featured_media.media_type == 'model'
                increment model_index
              elsif featured_media.media_type == 'video' or featured_media.media_type == 'external_video'
                increment video_index
              elsif featured_media.media_type == 'image'
                increment image_index
              endif
            endcapture
            assign media_index = media_index | plus: 1
          -%}
          <li
            id="Slide-Thumbnails-{{ section.id }}-0"
            class="thumbnail-list__item slider__slide{% if section.settings.hide_variants and variant_images contains featured_media.src %} thumbnail-list_item--variant{% endif %}"
            data-target="{{ section.id }}-{{ featured_media.id }}"
            data-media-position="{{ media_index }}"
          >
            {%- capture thumbnail_id -%}
              Thumbnail-{{ section.id }}-0
            {%- endcapture -%}
            <button
              class="thumbnail global-media-settings global-media-settings--no-shadow"
              aria-label="{%- if featured_media.media_type == 'image' -%}{{ 'products.product.media.load_image' | t: index: media_index }}{%- elsif featured_media.media_type == 'model' -%}{{ 'products.product.media.load_model' | t: index: media_index }}{%- elsif featured_media.media_type == 'video' or featured_media.media_type == 'external_video' -%}{{ 'products.product.media.load_video' | t: index: media_index }}{%- endif -%}"
              aria-current="true"
              aria-controls="GalleryViewer-{{ section.id }}"
              aria-describedby="{{ thumbnail_id }}"
            >
              {{
                featured_media.preview_image
                | image_url: width: 416
                | image_tag:
                  loading: 'lazy',
                  sizes: sizes,
                  widths: '54, 74, 104, 162, 208, 324, 416',
                  id: thumbnail_id,
                  alt: featured_media.alt
                | escape
              }}
            </button>
          </li>
        {%- endif -%}
        {%- for media in product.media -%}
          {%- unless media.id == product.selected_or_first_available_variant.featured_media.id -%}
            {%- liquid
              capture media_index
                if media.media_type == 'model'
                  increment model_index
                elsif media.media_type == 'video' or media.media_type == 'external_video'
                  increment video_index
                elsif media.media_type == 'image'
                  increment image_index
                endif
              endcapture
              assign media_index = media_index | plus: 1
            -%}
            <li
              id="Slide-Thumbnails-{{ section.id }}-{{ forloop.index }}"
              class="thumbnail-list__item slider__slide{% if section.settings.hide_variants and variant_images contains media.src %} thumbnail-list_item--variant{% endif %}"
              data-target="{{ section.id }}-{{ media.id }}"
              data-media-position="{{ media_index }}"
            >
              {%- if media.media_type == 'model' -%}
                <span class="thumbnail__badge" aria-hidden="true">
                  <span class="svg-wrapper">
                    {{- 'icon-3d-model.svg' | inline_asset_content -}}
                  </span>
                </span>
              {%- elsif media.media_type == 'video' or media.media_type == 'external_video' -%}
                <span class="thumbnail__badge" aria-hidden="true">
                  <span class="svg-wrapper">
                    {{- 'icon-play.svg' | inline_asset_content -}}
                  </span>
                </span>
              {%- endif -%}
              {%- capture thumbnail_id -%}
                Thumbnail-{{ section.id }}-{{ forloop.index }}
              {%- endcapture -%}
              <button
                class="thumbnail global-media-settings global-media-settings--no-shadow"
                aria-label="{%- if media.media_type == 'image' -%}{{ 'products.product.media.load_image' | t: index: media_index }}{%- elsif media.media_type == 'model' -%}{{ 'products.product.media.load_model' | t: index: media_index }}{%- elsif media.media_type == 'video' or media.media_type == 'external_video' -%}{{ 'products.product.media.load_video' | t: index: media_index }}{%- endif -%}"
                {% if media == product.selected_or_first_available_variant.featured_media
                  or product.selected_or_first_available_variant.featured_media == null
                  and forloop.index == 1
                %}
                  aria-current="true"
                {% endif %}
                aria-controls="GalleryViewer-{{ section.id }}"
                aria-describedby="{{ thumbnail_id }}"
              >
                {{
                  media.preview_image
                  | image_url: width: 416
                  | image_tag:
                    loading: 'lazy',
                    sizes: sizes,
                    widths: '54, 74, 104, 162, 208, 324, 416',
                    id: thumbnail_id,
                    alt: media.alt
                  | escape
                }}
              </button>
            </li>
          {%- endunless -%}
        {%- endfor -%}
      </ul>
      <button
        type="button"
        class="slider-button slider-button--next{% if media_count <= 3 %} small-hide{% endif %}{% if media_count <= 4 %} medium-hide large-up-hide{% endif %}"
        name="next"
        aria-label="{{ 'general.slider.next_slide' | t }}"
        aria-controls="GalleryThumbnails-{{ section.id }}"
        data-step="3"
      >
        <span class="svg-wrapper">
          {{- 'icon-caret.svg' | inline_asset_content -}}
        </span>
      </button>
    </slider-component>
  {%- endif -%}
</media-gallery> {% endcomment %}

<div class="custom-media-gallery">

  <!-- Desktop Gallery -->
  <div class="desktop-gallery">
    <div class="main-image-wrapper">
      <div class="cus-sticky">
        {% for media in product.media %}
           {% assign alt_parts = media.alt | split: '/' %}
          {% assign last_index = product.options.size | minus: 1 %}

          {% comment %} {% assign parts = media.alt | split: '/' %}
          {% assign color = parts[0] | strip %}
          {% assign size = parts[1] | strip %}
          {% assign finish = parts[2] | strip %}
          {% assign fragrance = parts[3] | strip %}
          {% assign volume = parts[4] | strip %} {% endcomment %}
          <div class="main-image-item"
                    {% unless media.alt == product.title %}
           {% for i in (0..last_index) %}
             {% assign option_name = product.options[i] | downcase | strip %}
             {% assign option_value = alt_parts[i] | strip %}
             data-{{ option_name | handle }}="{{ option_value }}"
           {% endfor %}
         {% endunless %}

{% comment %}             
            {% unless media.alt == product.title %} 
              data-media-alt ="{{  media.alt  }}" 
              data-color="{{ color | handle }}" 
              data-size="{{ size | handle }}" 
              data-finish="{{ finish }}"
              data-fragrance={{ fragrance }} 
              data-volume={{ volume }}
             {% endunless %}  {% endcomment %}
             style="display: none;">
            {% if media.media_type == 'image' %}
              <a class="glightbox" href="{{ media.preview_image | img_url: '2048x2048' }}" data-type="image">
                <img src="{{ media.preview_image | img_url: '1024x1024' }}" alt="{{ media.alt | escape }}">
              </a>
            {% elsif media.media_type == 'video' %}
              {{ media | video_tag: controls: false, autoplay: true, loop: true, muted: true }}
            {% endif %}
          </div>
        {% endfor %}
      </div>
    </div>

    <div class="thumbnails-wrapper">
      <div class="cus-sticky">
        {% for media in product.media %}
          {% assign alt_parts = media.alt | split: '/' %}
          {% assign last_index = product.options.size | minus: 1 %}
          {% comment %} {% assign parts = media.alt | split: '/' %}
          {% assign color = parts[0] | strip %}
          {% assign size = parts[1] | strip %}
          {% assign finish = parts[2] | strip %}
          {% assign fragrance = parts[3] | strip %}
          {% assign volume = parts[4] | strip %} {% endcomment %}
          <div class="thumbnail-item" 
                         {% unless media.alt == product.title %}
           {% for i in (0..last_index) %}
             {% assign option_name = product.options[i] | downcase | strip %}
             {% assign option_value = alt_parts[i] | strip %}
             data-{{ option_name | handle }}="{{ option_value }}"
           {% endfor %}
         {% endunless %}
             {% comment %} {% unless media.alt == product.title %} 
              data-color="{{ color | handle }}" 
              data-size="{{ size | handle }}"  
              data-finish="{{ finish }}" 
              data-fragrance ="{{ fragrance }}" 
              data-volumn= "{{ volume }}" 
            {% endunless %}  {% endcomment %}
            style="display: none;">
            {% if media.media_type == 'image' %}
              <a class="glightbox" href="{{ media.preview_image | img_url: '2048x2048' }}" data-type="image">
                <img src="{{ media.preview_image | img_url: 'master' }}" alt="{{ media.alt | escape }}">
              </a>
            {% elsif media.media_type == 'video' %}
              {{ media | video_tag: controls: false, autoplay: true, loop: true, muted: true }}
            {% endif %}
          </div>
        {% endfor %}
      </div>
    </div>
  </div>

<!-- Mobile Gallery -->
<div class="mobile-gallery">
  <div class="swiper">
    <div class="swiper-wrapper">
      {% for media in product.media %}
        {% assign alt_parts = media.alt | split: '/' %}
        {% assign last_index = product.options.size | minus: 1 %}
        {% comment %} {% assign parts = media.alt | split: '/' %}
        {% assign color = parts[0] | strip %}
        {% assign size = parts[1] | strip %}
        {% assign fragrance = parts[3] | strip %}
        {% assign volume = parts[4] | strip %} {% endcomment %}
        <div class="swiper-slide"  
                 {% unless media.alt == product.title %}
           {% for i in (0..last_index) %}
             {% assign option_name = product.options[i] | downcase | strip %}
             {% assign option_value = alt_parts[i] | strip %}
             data-{{ option_name | handle }}="{{ option_value }}"
           {% endfor %}
         {% endunless %}
          {% comment %} {% unless media.alt == product.title %} 
            data-color="{{ color | handle }}" 
            data-size="{{ size | handle }}" 
            data-finish="{{ finish }}" 
            data-fragrance ="{{ fragrance }}" 
            data-volume="{{ volume }}" 
          {% endunless %}  {% endcomment %}
           style="display: none;">
          {% if media.media_type == 'image' %}
            <a class="glightbox" href="{{ media.preview_image | img_url: '2048x2048' }}" data-type="image">
              <img src="{{ media.preview_image | img_url: '1024x1024' }}" alt="{{ media.alt | escape }}">
            </a>
          {% elsif media.media_type == 'video' %}
            {{ media | video_tag: controls: false, autoplay: true, loop: true, muted: true }}
          {% endif %}
        </div>
      {% endfor %}
    </div>
    <div class="swiper-pagination"></div>
  </div>
</div>

</div>


{% style %}
.desktop-gallery { display: block; }
.mobile-gallery { display: none; }

@media (max-width: 991px) {
  .desktop-gallery { display: none; }
  .mobile-gallery { display: block; }
}

.thumbnail-item, .swiper-slide, .main-image-item {
  position: relative;
  display: inline-block;
}

.play-icon {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 24px;
  color: white;
  pointer-events: none;
}
.thumbnail-item video{width:100%;}
.main-image-item video{width:100%;}
{% endstyle %}

{% comment %} <script>
  document.addEventListener('DOMContentLoaded', () => {
const variantOptions = {{ product.options | json }}; // ["Color", "Size"]

  function updateGallery() {
    console.log('called??')
    const selectedOptions = {};
    variantOptions.forEach(option => {
      const capitalized = option.charAt(0).toUpperCase() + option.slice(1);
      let selected = document.querySelector(`.swatch-input__input[name^="${capitalized}"]:checked`);
      if (!selected) {
        selected = document.querySelector(`select[name="${capitalized}"]`);
      }
      selectedOptions[option.toLowerCase()] = selected ? selected.value.toLowerCase() : null;
    });
      console.log(selectedOptions,'selectedOptions')

      function normalizeShopifySrc(src) {
      if (!src) return '';
        let cleanSrc = src.split('?')[0];
        cleanSrc = cleanSrc.replace(/_(\d+)x(\d+)(\.\w+)$/, '$3');
        return cleanSrc;
    }

    let found = false;
    document.querySelectorAll('.main-image-item').forEach(item => {
        if (found) {
          item.style.display = 'none';
        return;
          }

      let show = true;
      for (const [key, val] of Object.entries(selectedOptions)) {
        console.log(item.dataset[key],'itemdata',val,'valus')
        if (!val || item.dataset[key].toLowerCase() !== val.replace('.', '-')) {
          show = false;
          break;
        }
      }
      if (show) {
        item.style.display = 'block';
        found = true;
      } else {
        item.style.display = 'none';
      }
    });

  const visibleMainSrcs = Array.from(document.querySelectorAll('.main-image-item'))
  .filter(item => item.style.display === 'block')
  .map(item => normalizeShopifySrc(item.querySelector('img').getAttribute('src')));

   document.querySelectorAll('.thumbnail-item').forEach(item => {
      let show = true;
      let Image = item.querySelector('img')
      let src = normalizeShopifySrc(Image.getAttribute('src'));
    console.log('checkDataSrc',src)
    if (visibleMainSrcs.includes(src)) { show = false; }
    else{
      for (const [key, val] of Object.entries(selectedOptions)) {
        if (!val || item.dataset[key].toLowerCase() !== val.replace('.', '-')) {
          show = false;
          break;
        }
      }
    }
      item.style.display = show ? 'block' : 'none';
    });

  }

  // Attach one event listener for changes on body
  document.body.addEventListener('change', (e) => {
    const target = e.target;
    if (variantOptions.some(option => {
      const capitalized = option.charAt(0).toUpperCase() + option.slice(1);
      return target.matches(`.swatch-input__input[name^="${capitalized}"]`) || target.matches(`select[name="${capitalized}"]`);
    })) {
      updateGallery();
    }
  });

  // Initial call on page load
  updateGallery();
});

document.addEventListener('DOMContentLoaded', () => {
  // Initialize GLightbox
  const lightbox = GLightbox({
    selector: '.glightbox',
    touchNavigation: true,
    loop: true,
    zoomable: true,
    autoplayVideos: true,
  });
});

if (window.innerWidth <= 991) {
  const swiper = new Swiper('.mobile-gallery .swiper', {
    slidesPerView: 1,
    spaceBetween: 10,
    pagination: {
      el: '.swiper-pagination',
      clickable: true,
    },
  });
}
</script> {% endcomment %}

<script>
document.addEventListener('DOMContentLoaded', () => {
  const variantOptions = {{ product.options | json }};

  let mobileSwiper; // store swiper instance

  function updateGallery() {
    const selectedOptions = {};
    variantOptions.forEach(option => {
      const capitalized = option.charAt(0).toUpperCase() + option.slice(1);
      let selected = document.querySelector(`.swatch-input__input[name^="${capitalized}"]:checked`);
      if (!selected) {
        selected = document.querySelector(`select[name="${capitalized}"]`);
      }
      selectedOptions[option.toLowerCase()] = selected ? selected.value.toLowerCase() : null;
    });

    function normalizeShopifySrc(src) {
      if (!src) return '';
      let cleanSrc = src.split('?')[0];
      cleanSrc = cleanSrc.replace(/_(\d+)x(\d+)(\.\w+)$/, '$3');
      return cleanSrc;
    }
    function normalizeValue(str) {
      {% comment %} return str ? str.toLowerCase().replace(/\s+/g, '').replace(/\./g, '-') : ''; {% endcomment %}
      return str
    ? str.toLowerCase()
         .replace(/\s+/g, '')       // remove spaces
         .replace(/\./g, '-')       // replace dots with dashes
         .replace(/[^a-z0-9-]/g, '') // remove everything except letters, numbers, and dashes
    : '';
    }
    let found = false;
    document.querySelectorAll('.main-image-item').forEach(item => {
  let show = false; // default: hidden
  const datasetKeys = Object.keys(item.dataset);

  // No dataset means a general/default image
  if (datasetKeys.length === 0 && !found) {
    show = true;
    found = true;
  } else {
    // Check all variant keys
    let isMatch = true;
    for (const [key, val] of Object.entries(selectedOptions)) {
      if (!val) continue; // ignore unselected
      if (!item.dataset[key]) { isMatch = false; break; }
      if (normalizeValue(item.dataset[key]) !== normalizeValue(val)) {
        isMatch = false;
        break;
      }
    }

    if (isMatch && !found) {
      show = true;
      found = true;
    }
  }
  item.style.display = show ? 'block' : 'none';
});

    const visibleMainSrcs = Array.from(document.querySelectorAll('.main-image-item'))
      .filter(item => item.style.display === 'block')
      .map(item => normalizeShopifySrc(item.querySelector('img')?.getAttribute('src')));

    document.querySelectorAll('.thumbnail-item').forEach(item => {
  let show = true;
  const img = item.querySelector('img');
  const src = normalizeShopifySrc(img?.getAttribute('src'));

  // 1️⃣ Hide if same as visible main image
  if (visibleMainSrcs.includes(src)) {
    show = false;
  } else {
    // 2️⃣ If no dataset keys → always show
    const datasetKeys = Object.keys(item.dataset);
    if (datasetKeys.length === 0) {
      show = true;
    } else {
      // 3️⃣ Otherwise check variant option matches
      for (const [key, val] of Object.entries(selectedOptions)) {
        if (!val) continue; // Skip if variant not selected
        if (!item.dataset[key]) continue; // Skip missing dataset keys

        if (normalizeValue(item.dataset[key]) !== normalizeValue(val)) {
          show = false;
          break;
        }
      }
    }
  }

  item.style.display = show ? 'block' : 'none';
});

// ✅ Handle Mobile Gallery visibility
document.querySelectorAll('.swiper-slide').forEach(slide => {
  let show = true;
  const datasetKeys = Object.keys(slide.dataset);
  const img = slide.querySelector('img');
  const src = normalizeShopifySrc(img?.getAttribute('src'));

  // 1️⃣ Hide if same as visible main image
  if (visibleMainSrcs.includes(src)) {
    show = false;
  } else {
    // 2️⃣ If no dataset attributes → always show
    if (datasetKeys.length === 0) {
      show = true;
    } else {
      // 3️⃣ Otherwise check variant matching
      for (const [key, val] of Object.entries(selectedOptions)) {
        if (!val) continue; // skip unselected variant
        if (!slide.dataset[key]) continue; // skip missing data key

        if (normalizeValue(slide.dataset[key]) !== normalizeValue(val)) {
          show = false;
          break;
        }
      }
    }
  }

  slide.style.display = show ? 'block' : 'none';
});


    // ✅ Update Swiper when slides change
    if (window.innerWidth <= 991 && mobileSwiper) {
      mobileSwiper.update();
    }

    // ✅ Reinit GLightbox for visible images only
    const visibleLinks = Array.from(document.querySelectorAll('.glightbox[data-type="image"]'))
      .filter(link => link.closest('.main-image-item, .thumbnail-item, .swiper-slide')?.style.display === 'block');
    if (window.activeLightbox) window.activeLightbox.destroy();
    window.activeLightbox = GLightbox({
      selector: visibleLinks,
      touchNavigation: true,
      loop: true,
      zoomable: true,
      autoplayVideos: true,
    });
  }

  // Variant change listener
  document.body.addEventListener('change', (e) => {
    const target = e.target;
    if (variantOptions.some(option => {
      const capitalized = option.charAt(0).toUpperCase() + option.slice(1);
      return target.matches(`.swatch-input__input[name^="${capitalized}"]`) ||
             target.matches(`select[name="${capitalized}"]`);
    })) {
      updateGallery();
    }
  });

  // ✅ Initialize GLightbox & Swiper after DOM load
  window.activeLightbox = GLightbox({
    selector: '.glightbox[data-type="image"]',
    touchNavigation: true,
    loop: true,
    zoomable: true,
    autoplayVideos: true,
  });

  if (window.innerWidth <= 991) {
    mobileSwiper = new Swiper('.mobile-gallery .swiper', {
      slidesPerView: 1,
      spaceBetween: 10,
      pagination: {
        el: '.swiper-pagination',
        clickable: true,
      },
    });
  }

  // Initial call
  updateGallery();
});
</script>








